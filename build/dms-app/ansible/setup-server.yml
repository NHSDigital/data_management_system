---

- hosts: localhost
  connection: local
  gather_facts: true
  vars_files:
    - "./vars/main.yml"

  tasks:
    - name: Install the 'Development tools' package group
      ansible.builtin.yum:
        name: "@Development tools"
        state: present

    - name: Remove Libuv Package from Amazon Linux2
      yum:
        name: libuv
        state: absent

    - name: Install Packages
      yum:
        name:
          - postgresql15
          - httpd
          - mod_ssl
          - gcc
          - readline-devel
          - zlib-devel
          - net-tools
          - openssl
          - p7zip
          - subversion
          - vim-common
          - xz
          - bzip2
          - ruby
          - jq
          - python-pip
          - python-devel
          - openldap-devel
        state: present

    - name: Install Libuv
      yum:
        name: libuv
        state: present
        disable_plugin: priorities

    - name: Install rbenv packages
      yum:
        name:
          # - git
          - git-svn
          - openssl-devel
          # - gcc
          # - gcc-c++
          - libyaml-devel
          - libffi-devel
          # - readline-devel
          # - zlib-devel
          - gdbm-devel
          # - ncurses-devel
          - libicu-devel
          - libxml2-devel
          - libxslt-devel
          # - patch
          - cmake3
          - libxml2-devel
          - libxslt-devel
          - postgresql-devel
          # - postgresql
          # - nodejs
          - npm
          - java-1.8.0-amazon-corretto-devel
          - python-cryptography
          - python-boto3
          - wget

    - name: install Nodejs
      yum:
        name: nodejs
        state: present

    - name:  Install Yarn with npm
      community.general.npm:
        name: yarn
        global: true
        state: present

    - name: Allow sudoers deployers group
      become: true
      template:
        src: templates/deployers.j2
        dest: /etc/sudoers.d/deployers

    - name: Make Deployer Group
      group:
        name: "{{ item }}"
      with_items:
        "{{ machine_groups }}"

    - name: Create Application and other Users
      user:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
        shell: /bin/bash
        create_home: yes
        groups: deployer
      with_items:
        - "{{ application_users }}"

    - name: Copy /etc/skel to application and other users
      copy:
        src: /etc/skel
        dest: "{{ item.home_directory }}"
        remote_src: yes
      with_items:
        - "{{ application_users }}"

    # - name: Create File System
    #   community.general.filesystem:
    #     fstype: xfs
    #     dev: /dev/xvdb

    # - name: Mount File System
    #   mount:
    #     path: "{{ item.path }}"
    #     src: "{{ item.src }}"
    #     fstype: "{{ item.fstype }}"
    #     state: mounted
    #   with_items:
    #     "{{ fstab_mounts }}"

    - name: Make Group Permission
      become: true
      file:
        name: "{{ item.home_directory }}"
        state: "{{ item.home_directory_state }}"
        owner: "{{ item.home_directory_owner }}"
        group: "{{ item.home_directory_group }}"
        mode: "{{ item.home_directory_octal_permissions }}"
      with_items:
        "{{ application_users }}"

    - name: "Set up TMPDIR and GEM_HOME for rbenv installation"
      become_user: "{{ item }}"
      become: true
      shell: |
        if ! grep -q "unset GEM_HOME" ~/.bash_profile; then
          echo "unset GEM_HOME" >> ~/.bash_profile
        fi
      with_items:
        "{{ ruby_env_users }}"

    - name: Create Ruby Application
      include_role:
        name: zzet.rbenv
      vars:
        rbenv_tmpdir: "/home/{{ item[0] }}/rbenv_tmp"
        rbenv_users:
          "{{ ruby_env_users }}"

    - name: Make .ssh folder
      become_user: "{{ app_user }}"
      become: true
      file:
        path: ~/tmp/.ssh
        state: directory
        mode: 0700
        owner: "{{ app_user }}"
        group: "{{ app_user }}"

    - name: "generate SSH key for {{ app_user }} directory"
      become_user: "{{ app_user }}"
      become: true
      openssh_keypair:
        path: ~/tmp/.ssh/id_rsa
        type: rsa
        size: 4096
        state: present
        force: no

    - name: create .ssh directory
      become_user: "{{ app_user }}"
      become: true
      file:
        path: ~/.ssh
        state: directory
        mode: 0700
        owner: "{{ app_user }}"
        group: "{{ app_user }}"

    - name: "create authorized_keys file to {{ app_user }} directory"
      become_user: "{{ app_user }}"
      become: true
      file:
        path: ~/.ssh/authorized_keys
        state: touch
        mode: 0600
        owner: "{{ app_user }}"
        group: "{{ app_user }}"

    - name: "add {{ app_user }} to authorized_key"
      become_user: "{{ app_user }}"
      become: true
      shell: cat ~/tmp/.ssh/id_rsa.pub > ~/.ssh/authorized_keys

    - name: copy .id_rsa keys to .ssh directory
      become_user: "{{ app_user }}"
      become: true
      copy:
        src:  ~/tmp/.ssh/id_rsa
        dest:  ~/.ssh/id_rsa
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: 0400
        remote_src: true

    - name: Delete content & directory
      become_user: "{{ app_user }}"
      become: true
      file:
        state: absent
        path: "/home/{{ app_user }}/data_management_system"

    - name: "Copy Code to {{ app_user }} directory"
      become_user: "{{ app_user }}"
      copy:
        src:  /tmp/mbis_front/
        dest: "/home/{{ app_user }}/data_management_system/"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: 0770
        remote_src: true

    - name: Remove Mini Racer from Gemfile.lock
      become_user: "{{ app_user }}"
      become: true
      args:
        chdir: "/home/{{ app_user }}/data_management_system"
      shell: sed -i.bak '/mini_racer ([0-9.]*-x86_64-linux/,+1d' Gemfile.lock

    - name: symlink cmake3 to cmake
      become: true
      file:
        src: /usr/bin/cmake3
        dest: "/home/{{ app_user }}/.rbenv/bin/cmake"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        state: link

    - name: Make mbis_front
      become: true
      become_user: "{{ app_user }}"
      block:
        - name: "Create .bash_profile on {{ app_user }} home"
          become_user: "{{ app_user }}"
          template:
            src: bash_profile.j2
            dest: "/home/{{ app_user }}/.bash_profile"
            owner: "{{ app_user }}"
            group: "{{ app_user }}"

        - name: Source Bash profile
          shell: "source /home/{{ app_user }}/.bash_profile"

        - name: bundle install
          become_user: "{{ app_user }}"
          shell: "source /home/{{ app_user }}/.bash_profile && /home/{{ app_user }}/.rbenv/shims/bundle install --local"
          args:
            chdir: "/home/{{ app_user }}/data_management_system/"

        - name: bundle check
          args:
            chdir: "/home/{{ app_user }}/data_management_system/"
          shell: "source /home/{{ app_user }}/.bash_profile && /home/{{ app_user }}/.rbenv/shims/bundle check"

        - name: Get Current branch
          shell: |
            git config --global init.defaultBranch main
            git config --global user.email "you@example.com"
            git config --global user.name "Your Name"
            git init
            rm -rf config/.git/
            git add * .[^.]*
            git commit -qm 'Commit CodeDeploy checkout'
            git rev-parse --abbrev-ref HEAD

            # TODO: if config/.git exists, need to find the way to delete 
          args:
            chdir: "/home/{{ app_user }}/data_management_system"
          register: current_branch

        - name: Get facts
          set_fact: current_branch=current_branch.stdout

        - name: Move Deployments file
          shell: |
            (head -1 config/deployments.yml; printf "current:\n  branch: `git rev-parse HEAD`\n  ruby: `cat .ruby-version`\n"; tail -n+5 config/deployments.yml) > config/deployments.yml2
            mv config/deployments.yml2 config/deployments.yml
          args:
            chdir: "/home/{{ app_user }}/data_management_system"

        - name: Move all config file
          shell: |
            cp config/secrets.yml.sample config/secrets.yml
            cp config/smtp_settings.yml.sample config/smtp_settings.yml
            cp config/database.yml.sample config/database.yml
          args:
            chdir: "/home/{{ app_user }}/data_management_system"

        - name: Clear Known hosts
          shell: |
            echo "" > /home/{{ app_user }}/.ssh/known_hosts

        - name: Bundle exec cap deploy:setup
          args:
            chdir: "/home/{{ app_user }}/data_management_system"
          shell: |
            source /home/{{ app_user }}/.bash_profile && CAP_DEPLOY_REPOSITORY='file:///home/{{ app_user }}/data_management_system/.git' DEPLOYER='{{ app_user }}' CAP_DEPLOY_APP_USER='{{ app_user }}' /home/{{ app_user }}/.rbenv/shims/bundle exec cap localhost_live deploy:setup

        - name: Bundle exec cap deploy:cold
          args:
            chdir: "/home/{{ app_user }}/data_management_system"
          shell: |
            source /home/{{ app_user }}/.bash_profile && CAP_DEPLOY_REPOSITORY='file:///home/{{ app_user }}/data_management_system/.git' DEPLOYER='{{ app_user }}' CAP_DEPLOY_APP_USER='{{ app_user }}' /home/{{ app_user }}/.rbenv/shims/bundle exec cap localhost_live deploy:cold
          register: deploy_cold
          ignore_errors: true
          # TODO: capistrano routinely writes to stderr. Find a better way to identify errors
          #       e.g. something like:
          # failed_when: "'rolling back' in deploy_cold.stdout"

    - name: Delete content & directory
      become_user: "{{ app_user }}"
      file:
        state: absent
        path: "/home/{{ app_user }}/data_management_system"
