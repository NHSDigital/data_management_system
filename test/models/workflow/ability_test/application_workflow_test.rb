require 'test_helper'

module Workflow
  # Tests grants relating to the Application workflow.
  class ApplicationWorkflowTest < ActiveSupport::TestCase
    def setup
      @project = create_project(
        team: teams(:team_one),
        project_type: project_types(:application),
        project_purpose: 'test',
        assigned_user: users(:application_manager_one)
      )
    end

    test 'application workflow as basic user' do
      user = users(:standard_user1)

      @project.stubs current_state: workflow_states(:draft)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:submitted)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_start)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_review)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_moderation)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_rejected)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_draft)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_rejected)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_completed)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:amend)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
    end

    test 'application workflow as project member' do
      user = users(:standard_user1)

      @project.stubs current_state: workflow_states(:draft)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:submitted)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_start)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_review)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_moderation)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_rejected)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_draft)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_rejected)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_completed)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:amend)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
    end

    test 'application workflow as project senior' do
      user = users(:standard_user2)

      @project.stubs current_state: workflow_states(:draft)
      assert user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:submitted)
      assert user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_start)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_review)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_moderation)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_rejected)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_draft)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_rejected)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_completed)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:amend)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
    end

    test 'application workflow as team delegate' do
      user = users(:delegate_user1)

      @project.stubs current_state: workflow_states(:draft)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:submitted)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_start)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_review)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_moderation)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_rejected)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_draft)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_rejected)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_completed)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:amend)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
    end

    test 'application workflow as ODR user' do
      user = users(:odr_user)

      @project.stubs current_state: workflow_states(:draft), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:submitted), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_start), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_review), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_moderation), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_rejected), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_draft), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_rejected), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_completed), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:amend)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
    end

    test 'application workflow as ODR application manager' do
      user = users(:application_manager_one)

      @project.stubs current_state: workflow_states(:draft), assigned_user_id: user.id
      assert user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:submitted), assigned_user_id: user.id
      assert user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_start), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_review), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_moderation), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_rejected), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_draft), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_rejected), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_completed), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:amend)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
    end

    test 'application workflow as ODR senior application manager' do
      user = users(:senior_application_manager_one)

      @project.stubs current_state: workflow_states(:draft), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:submitted), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_start), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_review), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_moderation), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_rejected), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_draft), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_rejected), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_completed), assigned_user_id: user.id
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:amend)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
    end


    test 'application workflow as administrator' do
      user = users(:admin_user)

      @project.stubs current_state: workflow_states(:draft)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:submitted)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_start)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_review)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_moderation)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:dpia_rejected)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_draft)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_rejected)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:contract_completed)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      @project.stubs current_state: workflow_states(:amend)
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
    end
  end
end
