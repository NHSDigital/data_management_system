require 'test_helper'

module Workflow
  # Tests grants relating to the Application workflow.
  class ApplicationWorkflowTest < ActiveSupport::TestCase
    def setup
      @project = create_project(
        team: teams(:team_one),
        project_type: project_types(:application),
        project_purpose: 'test',
        assigned_user: users(:application_manager_one)
      )
    end

    test 'application workflow as basic user' do
      user = users(:standard_user1)
      @project.project_states.destroy_all

      transition_to(@project, workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))
    end

    test 'application workflow as project member' do
      user = users(:standard_user1)
      @project.project_states.destroy_all

      transition_to(@project, workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))
    end

    test 'application workflow as project senior' do
      user = users(:standard_user2)
      @project.project_states.destroy_all

      transition_to(@project, workflow_states(:draft))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:submitted))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))
    end

    test 'application workflow as team delegate' do
      user = users(:delegate_user1)
      @project.project_states.destroy_all

      transition_to(@project, workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))
    end

    test 'application workflow as ODR user' do
      user = users(:odr_user)
      @project.project_states.destroy_all

      transition_to(@project, workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))
    end

    test 'application workflow as ODR application manager' do
      user = users(:application_manager_one)
      @project.project_states.destroy_all

      transition_to(@project, workflow_states(:draft))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:submitted))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      # refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      # refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:rejected))
      with_temporal_assignment_to(user, @project) do
        assert user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
        assert user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      end
      #####
      # FIXME: This becomes redundant once support for the adoption of temporal assignment is
      # removed (see the monkey patch in/for Workflow::Ability::ApplicationWorkflowAbility),
      # at which point the behaviour should match that of L#689 & L#690 above.
      with_temporal_assignment_to(users(:application_manager_two), @project) do
        refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
        refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      end
      assert user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      #####

      transition_to(@project, workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:rejected))
    end

    test 'application workflow as ODR senior application manager' do
      user = users(:senior_application_manager_one)
      @project.project_states.destroy_all

      transition_to(@project, workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))
      with_temporal_assignment_to(user, @project) do
        assert user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
        assert user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      end
      #####
      # FIXME: This becomes redundant once support for the adoption of temporal assignment is
      # removed (see the monkey patch in/for Workflow::Ability::ApplicationWorkflowAbility).
      @project.update_column(:assigned_user_id, user.id)
      assert user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      assert user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      #####

      transition_to(@project, workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))

      transition_to(@project, workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:rejected))
    end

    test 'application workflow as administrator' do
      user = users(:admin_user)
      @project.project_states.destroy_all

      transition_to(@project, workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      transition_to(@project, workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      transition_to(@project, workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      transition_to(@project, workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      transition_to(@project, workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      transition_to(@project, workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      transition_to(@project, workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      transition_to(@project, workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      transition_to(@project, workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))

      transition_to(@project, workflow_states(:amend))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:submitted))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_start))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_review))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_moderation))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:dpia_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_draft))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_rejected))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:contract_completed))
      refute user.can? :create, @project.project_states.build(state: workflow_states(:amend))
    end

    test 'standard or senior application manager can reopen an application in any state' do
      standard = users(:application_manager_one)
      senior   = users(:senior_application_manager_one)
      next_state = @project.transitionable_states.reject { |state| state.id == 'REJECTED' }.sample

      @project.transition_to!(next_state)
      @project.reload
      # close application
      @project.transition_to!(workflow_states(:rejected))

      assert standard.can? :create, @project.project_states.build(state: next_state)
      assert senior.can? :create, @project.project_states.build(state: next_state)
    end

    private

    def transition_to(project, state)
      project.project_states.build(state: state).save(validate: false)
      project.reload_current_state
      project.reload_current_project_state
    end

    def with_temporal_assignment_to(user, project)
      assignment = project.current_project_state.assign_to!(user: user)
      project.reload_current_project_state

      yield if block_given?
    ensure
      assignment.destroy!
      project.reload_current_project_state
    end
  end
end
